# Custom Converter
# NOTE - Every component is assumed to have name and description so they do not need to be included here
#
# isConfigMandatory - Mandatory for the component to be deemed to be complete
# isUserImplementedClass - The user will define a beskpoke class that implements the interface, we will generate the spring property but leave implementation to client code.
# propertyName - Name of the property, used on input screens and to generate variable names
# propertyConfigFileLabel - Identifies the spring injected property name
#
# If a property does not have a propertyConfigFileLabel it is assumed that the property will not be environment specific i.e. not spring injected
# 1                 2                      3            4                       5        6          7                                                                                     8
# isConfigMandatory|isUserImplementedClass|propertyName|propertyConfigFileLabel|dataType|validation|defaultValue - dataType must be string or an object that support Object.value(String)|helpText
true|false|BespokeClassName||java.lang.String|||The name of the class that will contain the custom code.
true|false|FromType||java.lang.String||java.lang.String|The fully qualified type the the converter will take as input, it can be any String or class that implements Object valueOf(String)
true|false|ToType||java.lang.String||java.lang.String|The fully qualified type that the converter will create, it can be any String or class that implements Object valueOf(String)