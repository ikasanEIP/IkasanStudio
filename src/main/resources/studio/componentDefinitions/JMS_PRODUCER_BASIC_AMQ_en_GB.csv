# propertyName|paramGroupNumber|affectsBespokeClass|isConfigMandatory|isUserSuppliedClass|isSetterProperty|isUserDefineResource|propertyConfigFileLabel|propertyDataType|usageDataType|validation|validationMessage|defaultValue - dataType must be string or an object that support Object.value(String)|helpText
#
# Note: 1. First row must be the column  headings so that edit as table works in intellij
#       2. Every component is assumed to have name and description so they do not need to be included here
#
# propertyName - Name of the property, used on input screens and to generate variable names
# paramGroup - Aggregates parameters
# affectsBespokeClass - Causes the user part of the package structure to be regenerated so much be confirmed before being actioned
# isConfigMandatory - Mandatory for the component to be deemed to be complete
# isUserSuppliedClass - The user will define a beskpoke class that implements the interface, we will generate the spring property but leave implementation to client code.
# isSetterProperty - This property is for use in the component factory setter
# isUserDefineResource - The user will define the details of the resource within the ResourceFactory.
# propertyConfigFileLabel - Identifies the spring injected property name. If a property does not have a propertyConfigFileLabel it is assumed that the property will not be environment specific i.e. not spring injected
# propertyDataType - i.e. the data type used in the properties file, note that this is not always the same as the usage data type/valuedate e.g. a List will have a
# usageDataType - Defaults to the propertyDataType. This is the data type from the Ikasan perspective e.g. List will have a propertyDataType of String but usageDatatype of List<T>, cron expression may have the regexp pattern they need to conform to
# validation - Used by the property editor to validate the property
# validationMessage - To be displayed if the validation fails
# defaultValue - As displayed in the properties editor.
# helpText - As shown in the toolTip on the properties editor and error text.
#
# JMS_PRODUCER
#
# Mandatory Properties
ConfiguredResourceId|1|false|true|false|true|||java.lang.String||||p__moduleName-__componentName|By default, the configuration ID = modulename + flowname + componentName + componentType. There are times when you may wish to override this i.e. if you want multiple flows to share the same configration or you have changed a flow name but don't want to update properties that may have already been stored in the override properties database.
DestinationJndiName|1|false|true|false|true||jms.__module.__flow.__component.destination.jndi.name|java.lang.String|||||Destination(Topic/Queue) name, which could refer as well to JNDI name
PubSubDomain|1|false|true|false|true|||java.lang.Boolean|||||Set to true to indicate that destination is a topic, otherwise destination is a queue
SessionTransacted|1|false|true|false|true|||java.lang.Boolean||||true|Sets whether the session should be part of a transaction.
ConnectionFactoryName|1|false|true|false|true||jms.__module.__flow.__component.connection.factory.name|java.lang.String||||ConnectionFactory|ConnectionFactoryName is required if not already passed on the constructor
ConnectionFactoryUsername|1|false|true|false|true||jms.__module.__flow.__component.connection.factory.user|java.lang.String||||admin|Authentication principal
ConnectionFactoryPassword|1|false|true|false|true||jms.__module.__flow.__component.connection.factory.password|java.lang.String||||admin|Id set on the JMS connection for durable subscribers
ConnectionFactoryJndiPropertyProviderUrl|1|false|false|false|true||jms.__module.__flow.__component.connection.factory.jndi.provider.url|java.lang.String||||vm://embedded-broker?create=true&broker.persistent=false&broker.useJmx=false|The configuration information for the service provider to use. The value should contain a URL string. For more information, see the Java API documentation for javax.naming.Context.PROVIDER_URL.
ConnectionFactoryJndiPropertyFactoryInitial|1|false|true|false|true||jms.__module.__flow.__component.connection.factory.jndi.initial|java.lang.String||||org.apache.activemq.jndi.ActiveMQInitialContextFactory|The fully qualified class name of the factory class that will create the initial context. An initial context is the starting point for naming operations. For more information, see the Java API documentation for javax.naming.Context.INITIAL_CONTEXT_FACTORY.
DestinationJndiPropertyFactoryInitial|1|false|false|false|true||jms.__module.__flow.__component.destination.jndi.initial|java.lang.String||||org.apache.activemq.jndi.ActiveMQInitialContextFactory|The fully qualified class name of the factory class that will create the initial context. An initial context is the starting point for naming operations. For more information, see the Java API documentation for javax.naming.Context.INITIAL_CONTEXT_FACTORY.
DestinationJndiPropertyProviderUrl|1|false|false|false|true||jms.__module.__flow.__component.destination.jndi.provider.url|java.lang.String||||vm://embedded-broker?create=true&broker.persistent=false&broker.useJmx=false|The configuration information for the service provider to use. The value should contain a URL string. For more information, see the Java API documentation for javax.naming.Context.PROVIDER_URL.
DestinationJndiPropertySecurityCredentials|1|false|false|false|true||jms.__module.__flow.__component.destination.jndi.password|java.lang.String||||admin|The credentials of the principal for authenticating the caller to the service. For more information, see the Java API documentation for javax.naming.Context.SECURITY_CREDENTIALS.
DestinationJndiPropertySecurityPrincipal|1|false|false|false|true||jms.__module.__flow.__component.destination.jndi.user|java.lang.String||||admin|The identity of the principal for authenticating the caller to the service. For more information, see the Java API documentation for javax.naming.Context.SECURITY_PRINCIPAL.
Name|1|false|true|false|false|||java.lang.String|||||The name of the component as displayed on diagrams, space are encouraged, succinct is best. The name should be unique for the flow.
# Optional Properties
Description|1|false|false|false|false|||java.lang.String|||||A more detailed description of the component that may assist in support.