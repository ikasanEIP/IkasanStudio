# propertyName|paramGroupNumber|paramNumber|isConfigMandatory|isUserImplementedClass|isSetterProperty|isUserDefineResource|propertyConfigFileLabel|propertyDataType|usageDataType|validation|defaultValue - dataType must be string or an object that support Object.value(String)|helpText
#
# Note: 1. First row must be the column  headings so that edit as table works in intellij
#       2. Every component is assumed to have name and description so they do not need to be included here
#
# propertyName - Name of the property, used on input screens and to generate variable names
# paramGroup - Aggregates parameters
# paramNumber - Within the group
# isConfigMandatory - Mandatory for the component to be deemed to be complete
# isUserImplementedClass - The user will define a beskpoke class that implements the interface, we will generate the spring property but leave implementation to client code.
# isSetterProperty - This property is for use in the component factory setter
# isUserDefineResource - The user will define the details of the resource within the ResourceFactory.
# propertyConfigFileLabel - Identifies the spring injected property name. If a property does not have a propertyConfigFileLabel it is assumed that the property will not be environment specific i.e. not spring injected
# propertyDataType - i.e. the data type used in the properties file, note that this is not always the same as the usage data type/valuedate e.g. a List will have a
# usageDataType - Defaults to the propertyDataType. This is the data type from the Ikasan perspective e.g. List will have a propertyDataType of String but usageDatatype of List<T>, cron expression may have the regexp pattern they need to conform to
# validation - Used by the property editor to validate the property
# defaultValue - As displayed in the properties editor.
# helpText - As shown in the toolTip on the properties editor and error text.
#
# Custom Converter
#
# Mandatory Properties
BespokeClassName|1|1|true|false|false|||java.lang.String|||MyFilter|The name of the class that will contain the custom code.
Name|1|1|true|false|false|||java.lang.String||||The name of the component as displayed on diagrams, space are encouraged, succinct is best. The name should be unique for the flow.
# Optional Properties||||||||||||
Description|1|1|false|false|false|||java.lang.String||||A more detailed description of the component that may assist in support.
FromType|1|1|true|false|false|||java.lang.String|||java.lang.String|The fully qualified type the the converter will take as input.
Configuration|1|1|false|true|true|||java.lang.String|configurationDefined|||Provide the bean type that contains bespoke configurations for this component
ConfiguredResourceId|1|1|false|false|true|||java.lang.String||||This is the key to an instance of a Configuration (see definition of configuration). By default, the configuration ID = modulename + flowname + componentName + componentType. There are times when you may wish to override this i.e. if you want multiple flows to share the same configration or you have changed a flow name but don't want to update properties that may have already been stored in the override properties database.
