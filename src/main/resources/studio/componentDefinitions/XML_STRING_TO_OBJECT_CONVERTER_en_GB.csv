# propertyName|isConfigMandatory|isUserImplementedClass|isUserDefinedResource|propertyConfigFileLabel|propertyDataType|usageDataType|validation|defaultValue - dataType must be string or an object that support Object.value(String)|helpText
#
# Note: 1. First row must be th column  headings so that edit as table works in intellij
#       2. Every component is assumed to have name and description so they do not need to be included here
#
# isConfigMandatory - Mandatory for the component to be deemed to be complete
# isUserImplementedClass - The user will define a beskpoke class that implements the interface, we will generate the spring property but leave implementation to client code.
# propertyName - Name of the property, used on input screens and to generate variable names
# propertyConfigFileLabel - Identifies the spring injected property name. If a property does not have a propertyConfigFileLabel it is assumed that the property will not be environment specific i.e. not spring injected
# propertyDataType - i.e. the data type used in the properties file, note that this is not always the same as the usage data type/valuedate e.g. a List will have a
# usageDataType - Defaults to the propertyDataType. This is the data type from the Ikasan perspective e.g. List will have a propertyDataType of String but usageDatatype of List<T>, cron expression may have the regexp pattern they need to conform to
# validation - Used by the property editor to validate the property
# defaultValue - As displayed in the properties editor.
# helpTest - As shown in the toolTip on the properties editor and error text.
#
# OBJECT_TO_XML_STRING_CONVERTER
#
# Mandatory Properties
# Optional Properties
AutoConvertElementToValue|false|false|||java.lang.Boolean||||
Configuration|false|true|||java.lang.String|org.ikasan.component.endpoint.filesystem.messageprovider.FileConsumerConfiguration|||Provide the classname that overrides and implements the default FileConsumerConfiguration interface. The class encapsulates all the properties here into a single bean, using it will reduce your ability to configure the component within this tool.
ConfiguredResourceId|false|false|||java.lang.String||||By default, the configuration ID = modulename + flowname + componentName + componentType. There are times when you may wish to override this i.e. if you want multiple flows to share the same configration or you have changed a flow name but don't want to update properties that may have already been stored in the override properties database.
ClassToBeBound|false|false|||java.lang.String|java.Lang.Object|||Class of the object to be serialised
ClassesToBeBound|false|false|||java.lang.String|java.util.List<java.Lang.Object>|||Classes of the objects to be serialised
ContextPath|false|false|||java.lang.String||||
ContextPaths|false|false|||java.lang.String|List<java.Lang.Object>|||
MarshallerProperties|false|false|||java.lang.String|java.util.Map<java.Lang.String, java.Lang.Object>|||
UnmarshallerProperties|false|false|||java.lang.String|java.util.Map<java.Lang.String, java.Lang.Object>|||
ValidationEventHandler|false|true|true||java.lang.String|javax.xml.bind.ValidationEventHandler|||A basic event handler interface for validation errors.

