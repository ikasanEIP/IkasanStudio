# FTP_CONSUMER -
# NOTE - Every component is assumed to have name and description so they do not need to be included here
#
# isConfigMandatory - Mandatory for the component to be deemed to be complete
# isUserImplementedClass - The user will define a beskpoke class that implements the interface, we will generate the spring property but leave implementation to client code.
# propertyName - Name of the property, used on input screens and to generate variable names
# propertyConfigFileLabel - Identifies the spring injected property name
# propertyDataType - i.e. the data type used in the properties file, note that this is not always the same as the usage data type/valuedate e.g. a List will have a
# usageDataType - Defaults to the propertyDataType. This is the data type from the Ikasan perspective e.g. List will have a propertyDataType of String but usageDatatype of List<T>, cron expression may have the regexp pattern they need to conform to
# validation - Used by the property editor to validate the property
# defaultValue - As displayed in the properies editor.
# helpTest - As shown in the toolTip on the properties editor and error text.
# If a property does not have a propertyConfigFileLabel it is assumed that the property will not be environment specific i.e. not spring injected
# 1                 2                      3            4                       5                6             7          8                                                                                     9
# isConfigMandatory|isUserImplementedClass|propertyName|propertyConfigFileLabel|propertyDataType|usageDataType|validation|defaultValue - dataType must be string or an object that support Object.value(String)|helpText
true|false|CronExpression|ftp.consumer.cron-expression|java.lang.String||||Cron based expression dictating the invocation schedule for this component. Example, "*/5 * * * * ?" will fire every 5 seconds.
true|false|FilenamePattern|ftp.consumer.filename-pattern|java.lang.String||||Regular expression for matching file names to be transported
true|false|Password|ftp.consumer.password|java.lang.String||||password used to login to (S)FTP server where consumer needs to connect. Takes precedences over privateKeyFilename. If both provided user/password combination will be used to login rather then user/privateKeyFilename.
true|false|RemoteHost|ftp.consumer.remote-host|java.lang.String||||Default(‘localhost’) host name of the remote (S)FTP server where consumer needs to connect.
true|false|RemotePort|ftp.consumer.remote-port|java.lang.Integer||||Default(22) port of the remote (S)FTP server where consumer needs to connect.
true|false|SourceDirectory|ftp.consumer.source-directory|java.lang.String||||Remote directory from which to discover files
true|false|Username|ftp.consumer.username|java.lang.String||||User name used to login to (S)FTP server where consumer needs to connect.
false|false|Active||java.lang.Boolean||||Optional only available on FTP consumer. Default(False) Flag indicating whether the FTP connection is active or passive
false|false|AgeOfFiles||java.lang.Integer||||Default(-1) file filter related option expressed in days. Given that meta data of processed files is being collected on every successful file consumptions, the ageOfFiles option relates to housekeeping of the meta information. On every successful file consumption as part of post commit process file (S)FTP consumer will attempt to delete records older than ageOfFiles records from file filter persistence table. The operation is skipped when ageOfFiles=-1
false|false|Checksum||java.lang.Boolean||||Default(False) Flag indicating whether to verify integrity of retrieved file by comparing with a checksum supplied by the remote system.
false|false|Chronological||java.lang.Boolean||||Default(False) Flag indicating whether the file processing should be based on chronological order of file latest updates.
false|false|ChunkSize||java.lang.Integer||||Optional only applicable when chunking=true. Default(1048576) 1MB.
false|false|Chunking||java.lang.Boolean||||Default(False) Flag indicating whether the file download should be performed in smaller distinguished data chunks of size defined by chunkSize configuration.
false|false|CleanupJournalOnComplete||java.lang.Boolean||||Default(true) Existing (S)FTP consumer is using DB persistence tables to establish different operations it is performing as part of the usage of command pattern (FileDiscovery, FileRename, FileRetrive). That persistent information is by default cleaned up when cleanupJournalOnComplete=true. It can be occasionally useful to cleanupJournalOnComplete=false when performing some debugging.
false|false|ClientID||java.lang.String||||file filter related option identifying consumer. clientId is stored as part of the meta information persisted about the processed file.
#false|true|Configuration|sftp.consumer.configuration|org.ikasan.endpoint.ftp.consumer.FtpConsumerConfiguration||||Please provide the classname for your implementation of FtpConsumerConfiguration. Encapsulates all the properties for the (s)ftp configuration into a single bean.
#false|true|ConfiguredResourceId||java.lang.String||||This is required when adding developer specified bespoke configurations to a component. Once chosen, the component must be treated as a bespoke one i.e. not routinely autogenerated.
false|false|ConnectionTimeout||java.lang.Integer||||Default(60000) expressed in milliseconds. Internal (S)FTP connector connection timeout value.
false|false|DataTimeout||java.lang.Integer||||Optional only available on FTP consumer. Default(300000) expressed in milliseconds. Internal FTP connector data connection timeout value.
false|false|Destructive||java.lang.Boolean||||Default(False) Flag indicating whether the processed file should be deleted after successful consumption
false|false|FTPS||java.lang.Boolean||||Optional only available on FTP consumer. Default(false) used to determine if connection is using FTPs
false|false|FilterDuplicates||java.lang.Boolean||||Default(True) Flag indicating whether to filter out duplicates files based on previously persisted meta information. When value set to false no meta data is persisted hence same file could be processed over and over again.
false|false|FilterOnFilename||java.lang.Boolean||||Default(True) Flag indicating whether to include file name when persisting meta information about processed file.
false|false|FilterOnLastModifiedDate||java.lang.Boolean||||Default(True) Flag indicating whether to include last modified date of the file when persisting meta information about processed file and whether to use the last modified date for filtering. If filterOnFilename=true and filterOnLastModifiedDate=false any modifications to the files would not be detected and file wouldn’t be reprocessed.
false|false|FtpsIsImplicit||java.lang.Boolean||||Optional only available on FTP consumer. Default(false) only applicable when FTPS=true.
false|false|FtpsKeyStoreFilePassword||java.lang.String||||Optional only available on FTP consumer. Only applicable when FTPS=true.
false|false|FtpsKeyStoreFilePath||java.lang.String||||Optional only available on FTP consumer. Only applicable when FTPS=true.
false|false|FtpsPort|ftp.consumer.ftps-port|java.lang.Integer||||Optional only available on FTP consumer. Default(21) only applicable when FTPS=true. The remote port of FTPs server where consumer needs to connect.
false|false|FtpsProtocol|ftp.consumer.ftps-protocol|java.lang.String||||Optional only available on FTP consumer. Default(‘SSL’) only applicable when FTPS=true. The protocol used for remote FTPs connection.
false|false|IsRecursive||java.lang.Boolean||||Default(False) Flag indicating whether the sourceDirectory file read should be performed in recursive manner. The option can be useful if once consumes files from top level directory without knowing the lower lever dir structure.
false|false|IgnoreMisfire||java.lang.Boolean||||Default(True). Whether to ignore call back failures.
#false|false|ManagedEventIdentifierService||org.ikasan.spec.event.ManagedEventIdentifierService||||Override this is you want control over the flow event created by this consumer
#false|false|ManagedResourceRecoveryManager||org.ikasan.spec.management.ManagedResourceRecoveryManager||||Used to give the component a handle directly to the recovery manager or allow override of the managed resource recovery manager
false|false|MaxEagerCallbacks||java.lang.Integer||||The maximum number of consecutive eager scheduled callbacks (when eager is set to true) before reverting to business schedule. Default is unlimited until no more data available.
false|false|MaxRetryAttempts|ftp.consumer.max-retry-attempts|java.lang.Integer||||Default(3) internal (S)FTP connector retry count.
false|false|MaxRows||java.lang.Integer||||Default(-1) file filter related option. Given that meta data of processed files is being collected on every successful file consumptions, the maxRows option relates to housekeeping of the meta information. On every successful file consumption as part of post commit process file (S)FTP consumer will attempt to delete maxRows records from file filter persistence table. The operation is skipped when maxRows=-1
false|false|MinAge||java.lang.Long||||Default(120) file filter related option, expressed in seconds, used to indicate minimum age of the file on the remote filesystem before file can be processed. This setting is in place to prevent (S)FTP consumer from picking up file which is still being written to.
false|false|MessageProvider||org.ikasan.component.endpoint.quartz.consumer.MessageProvider||||The message provider is responsible for providing the message payload
false|false|MoveOnSuccessNewPath|ftp.consumer.move-on-success-new-path|java.lang.String||||Optional only applicable when moveOnSuccess=true, it provides new directory path when the processed file is moved to.
false|false|MoveOnSuccess||java.lang.Boolean||||Default(False) Flag indicating whether to move the processed file after successful consumption to different location defined by moveOnSuccessNewPath configuration.
false|false|PasswordFilePath|ftp.consumer.password-filepath|java.lang.String||||Optional only available on FTP consumer. The path of the file that contains the password.
false|false|RenameOnSuccessExtension||java.lang.String||||Optional only applicable when renameOnSuccess=true, renameOnSuccessExtension is suffixed to the processed fileName
false|false|RenameOnSuccess||java.lang.Boolean||||Default(False) Flag indicating whether to rename the processed file after successful consumption
false|false|ScheduledJobGroupName||java.lang.String||||Group for scheduled jobs within the internal Ikasan scheduler
false|false|ScheduledJobName||java.lang.String||||Name to identify this job within the internal Ikasan scheduler
false|false|SocketTimeout||java.lang.Integer||||Optional only available on FTP consumer. Default(300000) expressed in milliseconds. Internal FTP connector socket connection timeout value.
false|true|SourceDirectoryURLFactory|ftp.consumer.source-directory-url-factory|org.ikasan.framework.factory.DirectoryURLFactory||||Please provide the classname for your implementation of DirectoryURLFactory. The factory provides more flexible way of defining source directory. Most common use case would be when source directory changes names for instance based on date
false|false|SystemKey|ftp.consumer.system-key|java.lang.String||||Optional only available on FTP consumer.
#false|true|TransactionManager|ftp.consumer.transactionManager|org.springframework.transaction.jta.JtaTransactionManager||||Please provide the classname for your implementation of JtaTransactionManager. The Spring transaction manager, this may be needed to indetrage into thrid party containers.