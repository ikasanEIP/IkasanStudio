{
  "name": "SFTP Producer",
  "helpText": "Ending component of the flow, or a route in the flow. This producer allows delivery of a file to remote (S)FTP server. The producer is under pined with persistent store which saves meta information about the deliver files.",
  "webHelpURL": "https://github.com/ikasanEIP/ikasan/blob/3.1.x/ikasaneip/component/Readme.md",
  "builderFactory": "org.ikasan.builder.BuilderFactory",
  "implementingClass": "org.ikasan.component.endpoint.quartz.producer",
  "additionalKey": "SFTP Producer",
  "usesBuilder": true,
  "flowBuilderMethod": "producer",
  "endpointKey": "FTP Endpoint",
  "endpointTextKey": "remoteHost",
  "properties": {
    "componentName": {
      "propertyName": "componentName",
      "helpText": "The name of the component as displayed on diagrams, space are encouraged, succinct is best. The name should be unique for the flow.",
      "mandatory": true
    },
    "checksumDelivered": {
      "propertyName": "checksumDelivered",
      "helpText": "Default(false) Flag indicating whether producer should generate and deliver a checksum md5 hash file to remote server.",
      "setterProperty": true,
      "propertyDataType": "java.lang.Boolean"
    },
    "cleanupChunks": {
      "propertyName": "cleanupChunks",
      "helpText": "Default(true) Flag indicating whether chunk file information persisted in DB should be removed by producer after successful file delivery aka. successful file assembling from chunks.",
      "setterProperty": true,
      "propertyDataType": "java.lang.Boolean"
    },
    "cleanupJournalOnComplete": {
      "propertyName": "cleanupJournalOnComplete",
      "helpText": "Default(true) Existing (S)FTP consumer is using DB persistence tables to establish different operations it is performing as part of the usage of command pattern (FileDiscovery, FileRename, FileRetrive). That persistent information is by defaultcleaned up when cleanupJournalOnComplete=true. It can be occasionally useful to cleanupJournalOnComplete=false when performing some debugging.",
      "setterProperty": true,
      "propertyDataType": "java.lang.Boolean"
    },
    "clientID": {
      "propertyName": "clientID",
      "helpText": "File filter related option identifying consumer. clientId is stored as part of the meta information persisted about the processed file.",
      "propertyConfigFileLabel": "__flow.sftp.producer.clientID",
      "setterProperty": true
    },
    "configuration": {
      "propertyName": "configuration",
      "helpText": "Provide the classname that overrides and implements the default FileConsumerConfiguration interface. The class encapsulates all the properties here into a single bean, using it will reduce your ability to configure the component within this tool",
      "setterProperty": true,
      "userSuppliedClass": true,
      "usageDataType": "org.ikasan.component.endpoint.filesystem.messageprovider.FileConsumerConfiguration",
      "validation": "^[A-Z_$][a-zA-Z\\d_$£]*$",
      "validationMessage": "Provide a java classname for the Configuration bean."
    },
    "configuredResourceId": {
      "propertyName": "configuredResourceId",
      "helpText": "By default, the configuration ID = modulename + flowname + componentName + componentType. There are times when you may wish to override this i.e. if you want multiple flows to share the same configration or you have changed a flow name but don'twant to update properties that may have already been stored in the override properties database.",
      "setterProperty": true,
      "usageDataType": "java.lang.String"
    },
    "connectionTimeout": {
      "propertyName": "connectionTimeout",
      "helpText": "Default(60000) expressed in milliseconds. Internal (S)FTP connector connection timeout value.",
      "setterProperty": true,
      "propertyDataType": "java.lang.Integer"
    },
    "createParentDirectory": {
      "propertyName": "createParentDirectory",
      "helpText": "Default(false) Flag indicating whether outputDirectory should be created if it does not exist.",
      "setterProperty": true,
      "propertyDataType": "java.lang.Boolean"
    },
    "criticalOnStartup": {
      "propertyName": "criticalOnStartup",
      "helpText": "Identify this component as being critical for starting the flow i.e. if the component fails to start, the whole flow will not start.",
      "setterProperty": true,
      "propertyDataType": "java.lang.Boolean"
    },
    "knownHostFilename": {
      "propertyName": "knownHostFilename",
      "helpText": "The location of the known hosts file.",
      "propertyConfigFileLabel": "__flow.sftp.consumer.known-hosts-filename",
      "setterProperty": true,
      "usageDataType": "java.lang.String"
    },
    "managedResourceRecoveryManager": {
      "propertyName": "managedResourceRecoveryManager",
      "helpText": "Provide the classname that overrides and implements the default ManagedResourceRecoveryManager interface. This is used to give the component a handle directly to the recovery manager or allow override of the managedr esource recovery manager.",
      "setterProperty": true,
      "userSuppliedClass": true,
      "usageDataType": "org.ikasan.spec.management.ManagedResourceRecoveryManager",
      "validation": "^[A-Z_$][a-zA-Z\\d_$£]*$",
      "validationMessage": "Provide a java classname for the Configuration bean."
    },
    "maxRetryAttempts": {
      "propertyName": "maxRetryAttempts",
      "helpText": "Default(3) internal (S)FTP connector retry count.",
      "setterProperty": true,
      "propertyDataType": "java.lang.Integer",
      "propertyConfigFileLabel": "__flow.sftp.consumer.max-retry-attempts"
    },
    "outputDirectory": {
      "propertyName": "outputDirectory",
      "defaultValue": ".",
      "helpText": "Remote directory where to deliver the file.",
      "setterProperty": true,
      "propertyConfigFileLabel": "__flow.sftp.producer.outputDirectory"
    },
    "password": {
      "propertyName": "password",
      "helpText": "Password used to login to (S)FTP server where consumer needs to connect. Takes precedences over privateKeyFilename. If both provided user/password combination will be used to login rather then user/privateKeyFilename.",
      "mandatory": true,
      "propertyConfigFileLabel": "__flow.sftp.consumer.password",
      "setterProperty": true,
      "usageDataType": "java.lang.String"
    },
    "preferredKeyExchangeAlgorithm": {
      "propertyName": "preferredKeyExchangeAlgorithm",
      "helpText": "The key algorithm.",
      "setterProperty": true,
      "propertyConfigFileLabel": "__flow.sftp.consumer.preferred-key-exchange-algorithm"
    },
    "privateKeyFilename": {
      "propertyName": "privateKeyFilename",
      "helpText": "Flename for the private key.",
      "setterProperty": true,
      "propertyConfigFileLabel": "__flow.sftp.consumer.private-key-filename"
    },
    "remoteHost": {
      "propertyName": "remoteHost",
      "helpText": "Default('localhost') host name of the remote (S)FTP server where consumer needs to connect.",
      "mandatory": true,
      "propertyConfigFileLabel": "__flow.sftp.consumer.remote-host",
      "setterProperty": true,
      "usageDataType": "java.lang.String"
    },
    "remotePort": {
      "propertyName": "remotePort",
      "helpText": "Default(22) port of the remote (S)FTP server where consumer needs to connect.",
      "mandatory": true,
      "propertyConfigFileLabel": "__flow.sftp.consumer.remote-port",
      "setterProperty": true,
      "usageDataType": "java.lang.Integer"
    },
    "renameExtension": {
      "propertyName": "renameExtension",
      "helpText": "Default('tmp') file delivery to remote location takes place in two stages, first a file is delivered with suffix equal to renameExtension, further file is renamed with suffix being removed.",
      "setterProperty": true,
      "propertyDataType": "java.lang.Boolean"
    },
    "tempFileName": {
      "propertyName": "tempFileName",
      "helpText": "Temporary filename to use for incomplete transfer.",
      "setterProperty": true,
      "usageDataType": "java.lang.String"
    },
    "unzip": {
      "propertyName": "unzip",
      "helpText": "Default(false) Flag indicating whether the file should be unzipped on remote server as post delivery task. This makes an assumption that delivered stream is zipped.",
      "setterProperty": true,
      "propertyDataType": "java.lang.Boolean"
    },
    "username": {
      "propertyName": "username",
      "helpText": "User name used to login to (S)FTP server where consumer needs to connect.",
      "mandatory": true,
      "propertyConfigFileLabel": "__flow.sftp.consumer.username",
      "setterProperty": true,
      "usageDataType": "java.lang.String"
    }
  }
}