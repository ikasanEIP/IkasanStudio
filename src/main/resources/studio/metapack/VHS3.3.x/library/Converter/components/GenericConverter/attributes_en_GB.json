{
  "name": "Generic Converter",
  "flowBuilderMethod": "converter",
  "generatesUserImplementedClass": "true",
  "helpText": "<strong>Generic Converter</strong><p>The main responsibility of a converter is to convert from one form to another. The purpose of this converter is to support any type of transformation required, implemented by a bespoke converter class.</p>",
  "implementingClass": "",
  "webHelpURL": "https://github.com/ikasanEIP/ikasan/blob/3.1.x/ikasaneip/component/converter/Readme.md",
  "builderFactory": "org.ikasan.builder.BuilderFactory",
  "additionalKey": "Generic",
  "usesBuilderInFactory": true,
  "properties": {
    "componentName": {
      "propertyName": "componentName",
      "helpText": "The name of the component as displayed on diagrams, space are encouraged, succinct is best. The name should be unique for the flow. The name will be used internally to reflect the bean created.",
      "mandatory": true
    },
    "configurable": {
      "propertyName": "configurable",
      "helpText": "This property reflects that a component has the necessary configuration setup so that it can be edited in the blue console. Its is more of a status and as such is not explicitly used.",
      "ignoreProperty": true
    },
    "configuration": {
      "propertyName": "configuration",
      "helpText": "Provide the classname that overrides and implements the default FileConsumerConfiguration interface. The class encapsulates all the properties here into a single bean, using it will reduce your ability to configure the component within this tool",
      "setterProperty": true,
      "userSuppliedClass": true,
      "usageDataType": "org.ikasan.component.endpoint.filesystem.messageprovider.FileConsumerConfiguration",
      "validation": "^[A-Z_$][a-zA-Z\\d_$£]*$",
      "validationMessage": "Provide a java classname for the Configuration bean."
    },
    "configurationId": {
      "propertyName": "configurationId",
      "defaultValue": "__module-__flow-__component",
      "helpText": "By default, the configuration ID = modulename + flowname + componentName + componentType. There are times when you may wish to override this i.e. if you want multiple flows to share the same configration or you have changed a flow name but don't want to update properties that may have already been stored in the override properties database.",
      "setterProperty": true,
      "setterMethod": "setConfiguredResourceId",
      "usageDataType": "java.lang.String"
    },
    "invokerConfigurationId": {
      "propertyName": "invokerConfigurationId",
      "helpText": "By default, the configuration ID = modulename + flowname + componentName + componentType + some RandomData. There are times when you may wish to override this i.e. if you want multiple flows to share the same configration or you have changed a flow name but don't want to update properties that may have already been stored in the override properties database.",
      "usageDataType": "java.lang.String"
    },
    "requiresStub": {
      "propertyName": "requiresStub",
      "helpText": "Does this component require a stub to be generated by Studio, if not, it is assumed the user will provide the instance from its own factory class."
    },
    "userImplementedClassName": {
      "propertyName": "userImplementedClassName",
      "userImplementClassFtlTemplate": "brokerTemplate.ftl",
      "affectsUserImplementedClass": "true",
      "helpText": "The name of the class that that implements the interface for this generic component.",
      "mandatory": true,
      "validation": "^[A-Z_$][a-zA-Z\\d_$£]*$",
      "validationMessage": "Provide a valid java classname for the broker e.g. starting with upper case, followed by number/characters etc."
    },
    "fromType": {
      "propertyName": "fromType",
      "affectsUserImplementedClass": "true",
      "defaultValue": "java.lang.String",
      "helpText": "The type of data we expect to come into the converter. This can be any Java class.",
      "mandatory": true,
      "validation": "^([a-zA-Z_$][a-zA-Z\\d_$]*\\.)*[A-Z_$][a-zA-Z\\d_$£]*",
      "validationMessage": "Provide a fully qualified Java class name to be used as the type for the input to the converter."
    },
    "toType": {
      "propertyName": "toType",
      "affectsUserImplementedClass": "true",
      "defaultValue": "java.lang.String",
      "helpText": "The type of data we expect to be the output of the the converter. This can be any Java class.",
      "mandatory": true,
      "validation": "^([a-zA-Z_$][a-zA-Z\\d_$]*\\.)*[A-Z_$][a-zA-Z\\d_$£]*",
      "validationMessage": "Provide a fully qualified Java class name to be used as the type for the input to the converter."
    }
  }
}

