{
  "name": "Object Message To XML String Converter",
  "helpText": "<html><body><h3>Object Message To XML String Converter</h3><p>The main responsibility of a converter is to convert from one POJO type to another.</p><p>The Object Message to XML String Converter is an implementation of the Converter Interface. It provides a mechanism that translates a JAXB Object into an XML representation of that Object as a String.</p></body></html>",
  "webHelpURL": "https://github.com/ikasanEIP/ikasan/blob/3.1.x/ikasaneip/component/converter/ObjectToXmlStringConverter.md",
  "implementingClass": "org.ikasan.builder.component.converter.ObjectToXmlStringConverterBuilder",
  "ikasanComponentFactoryMethod": "objectToXmlStringConverter",
  "useImplementingClassInFactory": true,
  "flowBuilderMethod": "converter",
  "properties": {
    "componentName": {
      "propertyName": "componentName",
      "mandatory": true,
      "helpText": "The name of the component as displayed on diagrams, space are encouraged, succinct is best. The name should be unique for the flow. The name will be used internally to reflect the bean created."
    },
    "configurable": {
      "propertyName": "configurable",
      "helpText": "This property reflects that a component has the necessary configuration setup so that it can be edited in the blue console. Its is more of a status and as such is not explicitly used.",
      "ignoreProperty": true
    },
    "configuration": {
      "propertyName": "configuration",
      "helpText": "Provide the classname that overrides and implements the default FileConsumerConfiguration interface. The class encapsulates all the properties here into a single bean, using it will reduce your ability to configure the component within this tool",
      "setterProperty": true,
      "userSuppliedClass": true,
      "usageDataType":"org.ikasan.component.endpoint.filesystem.messageprovider.FileConsumerConfiguration",
      "validation":"^[A-Z_$][a-zA-Z\\d_$£]*$",
      "validationMessage": "Provide a java classname for the Configuration bean."
    },
    "configurationId": {
      "propertyName": "configurationId",
      "helpText": "By default, the configuration ID = modulename + flowname + componentName + componentType. There are times when you may wish to override this i.e. if you want multiple flows to share the same configration or you have changed a flow name but don't want to update properties that may have already been stored in the override properties database.",
      "setterProperty": true,
      "setterMethod" : "setConfiguredResourceId",
      "usageDataType":"java.lang.String"
    },
    "invokerConfigurationId": {
      "propertyName": "invokerConfigurationId",
      "helpText": "By default, the configuration ID = modulename + flowname + componentName + componentType + some RandomData. There are times when you may wish to override this i.e. if you want multiple flows to share the same configration or you have changed a flow name but don't want to update properties that may have already been stored in the override properties database.",
      "usageDataType":"java.lang.String"
    },
    "fastFailOnConfigurationLoad": {
      "propertyName": "fastFailOnConfigurationLoad",
      "helpText": "Determines whether we let the component fail if the initial setting and loading of configuration fails.",
      "setterProperty": true,
      "propertyDataType": "java.lang.Boolean"
    },
    "namespacePrefix": {
      "propertyName": "namespacePrefix",
      "helpText": "Optionally set namespace prefix (see https://docs.oracle.com/javase/8/docs/api/javax/xml/namespace/QName.html).",
      "setterProperty": true
    },
    "namespaceURI": {
      "propertyName": "namespaceURI",
      "helpText": "Optionally set namespace URI (see https://docs.oracle.com/javase/8/docs/api/javax/xml/namespace/QName.html).",
      "setterProperty": true
    },
    "noNamespaceSchema": {
      "propertyName": "noNamespaceSchema",
      "helpText": "Set to true if this is a no namespace schema.",
      "setterProperty": true,
      "propertyDataType": "java.lang.Boolean"
    },
    "objectClasses": {
      "propertyName": "objectClasses",
      "helpText": "Classes of the objects to be serialised.",
      "setterProperty": true,
      "usageDataType":"List<java.Lang.Object>"
    },
    "objectClass": {
      "propertyName": "objectClasses",
      "helpText": "Class of the objects to be serialised.",
      "setterProperty": true,
      "usageDataType":"java.Lang.Object"
    },
    "rootClassName": {
      "propertyName": "rootClassName",
      "helpText": "Optionally set root class name (QNAME).",
      "setterProperty": true
    },
    "rootName": {
      "propertyName": "rootName",
      "helpText": "Optionally set root name (QNAME).",
      "setterProperty": true
    },
    "routeOnValidationException": {
      "propertyName": "routeOnValidationException",
      "helpText": "Whether to route an XML validation failure to the next component (true) or throw an exception and rollback (false).",
      "setterProperty": true,
      "propertyDataType": "java.lang.Boolean"
    },
    "schemaLocation": {
      "propertyName": "schemaLocation",
      "helpText": "Schema location as put in the root attribute of the generated XML.",
      "setterProperty": true
    },
    "schema": {
      "propertyName": "schema",
      "helpText": "Actual schema against which validation will occur.",
      "setterProperty": true
    },
    "useNamespacePrefix": {
      "propertyName": "useNamespacePrefix",
      "helpText": "Should we use namespace prefixes?",
      "setterProperty": true,
      "propertyDataType": "java.lang.Boolean"
    },
    "validate": {
      "propertyName": "validate",
      "helpText": "Whether to validate the generated XML against the schema",
      "setterProperty": true,
      "propertyDataType": "java.lang.Boolean"
    },
    "xmlAdapterMap": {
      "propertyName": "xmlAdapterMap",
      "helpText": "Map of Class to XmlAdapter instance to override the XmlAdapter on the underlying marshaller",
      "setterProperty": true,
      "userSuppliedClass": true,
      "usageDataType":"java.util.Map<Class, javax.xml.bind.annotation.adapters.XmlAdapter>",
      "validation":"^[A-Z_$][a-zA-Z\\d_$£]*$",
      "validationMessage": "Provide a java classname for the bean."
    }
  }
}