{
  "name": "JMS Producer",
  "helpText": "Ending component of the flow, or a route in the flow. The JMS producer is based on Spring template and is used to connect to any Vendor specific JMS Broker(ActiveMQ, HornetQ, IBM MQ etc). However one need to include the related vendor specific libraries in the IM.",
  "webHelpURL": "https://github.com/ikasanEIP/ikasan/blob/3.1.x/ikasaneip/component/Readme.md",
  "builderFactory": "org.ikasan.builder.BuilderFactory",
  "implementingClass": "org.ikasan.component.endpoint.quartz.producer",
  "additionalKey": "JMS Producer",
  "usesBuilder": true,
  "flowBuilderMethod": "producer",
  "endpointKey": "Channel Endpoint",
  "endpointTextKey": "destinationJndiName",
  "properties": {
    "componentName": {
      "propertyName": "componentName",
      "helpText": "The name of the component as displayed on diagrams, space are encouraged, succinct is best. The name should be unique for the flow.",
      "mandatory": true
    },

    "configuration": {
      "propertyName": "configuration",
      "helpText": "Provide the classname that overrides and implements the default FileConsumerConfiguration interface. The class encapsulates all the properties here into a single bean, using it will reduce your ability to configure the component within this tool.",
      "setterProperty": true,
      "userSuppliedClass": true,
      "usageDataType": "org.ikasan.component.endpoint.filesystem.messageprovider.FileConsumerConfiguration",
      "validation": "^[A-Z_$][a-zA-Z\\d_$Â£]*$",
      "validationMessage": "Provide a java classname for the Configuration bean."
    },
    "configuredResourceId": {
      "propertyName": "configuredResourceId",
      "defaultValue": "__moduleName-__componentName",
      "helpText": "By default, the configuration ID = modulename + flowname + componentName + componentType. There are times when you may wish to override this i.e. if you want multiple flows to share the same configration or you have changed a flow name but don'twant to update properties that may have already been stored in the override properties database.",
      "mandatory": true,
      "setterProperty": true
    },
    "connectionFactory": {
      "propertyName": "connectionFactory",
      "helpText": "Provide the classname that overrides and implements the default ConnectionFactory interface. The class encapsulates all the properties here into a single bean, using it will reduce your ability to configure the component within this tool.",
      "setterProperty": true,
      "usageDataType":"javax.jms.ConnectionFactory",
      "userSuppliedClass":true
    },
    "connectionFactoryJNDIProperties": {
      "propertyName": "connectionFactoryJNDIProperties",
      "helpText": "JNDI parameters map. Typical map would include following keys : java.naming.provider.url, java.naming.factory.initial, java.naming.factory.url.pkgs, java.naming.security.credentials, java.naming.security.principle.",
      "setterProperty": true,
      "usageDataType":"java.util.Map<String, String>",
      "userSuppliedClass":true
    },
    "connectionFactoryJndiPropertyFactoryInitial": {
      "propertyName": "connectionFactoryJndiPropertyFactoryInitial",
      "defaultValue": "org.apache.activemq.jndi.ActiveMQInitialContextFactory",
      "helpText": "The fully qualified class name of the factory class that will create the initial context. An initial context is the starting point for naming operations. For more information, see the Java API documentation for javax.naming.Context.INITIAL_CONTEXT_FACTORY.",
      "mandatory": true,
      "setterProperty": true,
      "propertyConfigFileLabel": "jms.__module.__flow.__component.connection.factory.jndi.initial"
    },
    "connectionFactoryJndiPropertyProviderUrl": {
      "propertyName": "connectionFactoryJndiPropertyProviderUrl",
      "defaultValue": "vm://embedded-broker?create=true&broker.persistent=false&broker.useJmx=false",
      "helpText": "The configuration information for the service provider to use. The value should contain a URL string. For more information, see the Java API documentation for javax.naming.Context.PROVIDER_URL.",
      "setterProperty": true,
      "propertyConfigFileLabel": "jms.__module.__flow.__component.connection.factory.jndi.provider.url"
    },
    "connectionFactoryJndiPropertySecurityCredentials": {
      "propertyName": "connectionFactoryJndiPropertySecurityCredentials",
      "helpText": "The credentials of the principal for authenticating the caller to the service. For more information, see the Java API documentation for javax.naming.Context.SECURITY_CREDENTIALS.",
      "setterProperty": true
    },
    "connectionFactoryJndiPropertySecurityPrincipal": {
      "propertyName": "connectionFactoryJndiPropertySecurityPrincipal",
      "helpText": "The identity of the principal for authenticating the caller to the service. For more information, see the Java API documentation for javax.naming.Context.SECURITY_PRINCIPAL.",
      "setterProperty": true
    },
    "connectionFactoryJndiPropertyUrlPkgPrefixes": {
      "propertyName": "connectionFactoryJndiPropertyUrlPkgPrefixes",
      "helpText": "This is the JMS standard URL_PKG_PREFIXES, a colon-separated list of package prefixes for the class name of the factory class that will create a URL context factory.",
      "setterProperty": true
    },
    "connectionFactoryName": {
      "propertyName": "connectionFactoryName",
      "helpText": "ConnectionFactory|ConnectionFactoryName is required if not already passed on the constructor.",
      "mandatory": true,
      "setterProperty": true,
      "propertyConfigFileLabel": "jms.__module.__flow.__component.connection.factory.name"
    },
    "connectionFactoryPassword": {
      "propertyName": "connectionFactoryPassword",
      "defaultValue": "admin",
      "helpText": "Id set on the JMS connection for durable subscribers.",
      "mandatory": true,
      "setterProperty": true,
      "propertyConfigFileLabel": "jms.__module.__flow.__component.connection.factory.password"
    },
    "connectionFactoryUsername": {
      "propertyName": "connectionFactoryUsername",
      "defaultValue": "admin",
      "helpText": "Authentication principal.",
      "mandatory": true,
      "setterProperty": true,
      "propertyConfigFileLabel": "jms.__module.__flow.__component.connection.factory.user"
    },
    "connectionPassword": {
      "propertyName": "connectionPassword",
      "helpText": "Authentication credential.This value is masked on all GUI views.",
      "setterProperty": true
    },
    "connectionUsername": {
      "propertyName": "connectionUsername",
      "helpText": "Authentication principal.",
      "setterProperty": true
    },
    "deliveryMode": {
      "propertyName": "deliveryMode",
      "helpText": "This maps onto javax.jms.DeliveryMode i.e. NON_PERSISTENT = 1, PERSISTENT = 2.",
      "propertyDataType": "java.lang.Integer",
      "setterProperty": true
    },
    "deliveryPersistent": {
      "propertyName": "deliveryPersistent",
      "helpText": "Default(false) flag indicating whether publishing messages are persisted on the broker or hold in memory.",
      "setterProperty": true,
      "propertyDataType": "java.lang.Boolean"
    },
    "destinationJndiName": {
      "propertyName": "destinationJndiName",
      "helpText": "Destination(Topic/Queue) name, which could refer as well to JNDI name.",
      "mandatory": true,
      "setterProperty": true,
      "propertyConfigFileLabel": "jms.__module.__flow.__component.destination"
    },
    "destinationJndiProperties": {
      "propertyName": "destinationJndiProperties",
      "helpText": "Optional JNDI parameters map. Typical map would include following keys : java.naming.provider.url, java.naming.factory.initial, java.naming.factory.url.pkgs, java.naming.security.credentials, java.naming.security.principle.",
      "setterProperty": true
    },
    "destinationJndiPropertyFactoryInitial": {
      "propertyName": "destinationJndiPropertyFactoryInitial",
      "defaultValue": "org.apache.activemq.jndi.ActiveMQInitialContextFactory",
      "helpText": "The fully qualified class name of the factory class that will create the initial context. An initial context is the starting point for naming operations. For more information, see the Java API documentation for javax.naming.Context.INITIAL_CONTEXT_FACTORY.",
      "setterProperty": true,
      "propertyConfigFileLabel": "jms.__module.__flow.__component.destination.jndi.initial"
    },
    "destinationJndiPropertyProviderUrl": {
      "propertyName": "destinationJndiPropertyProviderUrl",
      "defaultValue": "vm://embedded-broker?create=true&broker.persistent=false&broker.useJmx=false",
      "helpText": "The configuration information for the service provider to use. The value should contain a URL string. For more information, see the Java API documentation for javax.naming.Context.PROVIDER_URL.",
      "setterProperty": true,
      "propertyConfigFileLabel": "jms.__module.__flow.__component.destination.jndi.provider.url"
    },
    "destinationJndiPropertySecurityCredentials": {
      "propertyName": "destinationJndiPropertySecurityCredentials",
      "defaultValue": "admin",
      "helpText": "The credentials of the principal for authenticating the caller to the service. For more information, see the Java API documentation for javax.naming.Context.SECURITY_CREDENTIALS.",
      "setterProperty": true,
      "propertyConfigFileLabel": "jms.__module.__flow.__component.destination.jndi.password"
    },
    "destinationJndiPropertySecurityPrincipal": {
      "propertyName": "destinationJndiPropertySecurityPrincipal",
      "defaultValue": "admin",
      "helpText": "The identity of the principal for authenticating the caller to the service. For more information, see the Java API documentation for javax.naming.Context.SECURITY_PRINCIPAL.",
      "setterProperty": true,
      "propertyConfigFileLabel": "jms.__module.__flow.__component.destination.jndi.user"
    },
    "destinationJndiPropertyUrlPkgPrefixes": {
      "propertyName": "destinationJndiPropertyUrlPkgPrefixes",
      "helpText": "This is the JMS standard URL_PKG_PREFIXES, a colon-separated list of package prefixes for the class name of the factory class that will create a URL context factory.",
      "setterProperty": true
    },
    "explicitQosEnabled": {
      "propertyName": "explicitQosEnabled",
      "helpText": "Default (false), set to true if the deliveryMode, priority or timeToLive qualities of service should be used when sending messages.",
      "setterProperty": true,
      "propertyDataType": "java.lang.Boolean"
    },
    "messageConverter": {
      "propertyName": "messageConverter",
      "helpText": "Default (false), set to true if the deliveryMode, priority or timeToLive qualities of service should be used when sending messages.",
      "setterProperty": true,
      "usageDataType": "org.springframework.jms.support.converter.MessageConverter",
      "userSuppliedClass":true
    },
    "messageIdEnabled": {
      "propertyName": "messageIdEnabled",
      "helpText": "See org.springframework.jms.core.JmsTemplate, provides a hint to the message producer to enable message IDs.",
      "setterProperty": true,
      "propertyDataType": "java.lang.Boolean"
    },
    "messageTimestampEnabled": {
      "propertyName": "messageTimestampEnabled",
      "helpText": "See org.springframework.jms.core.JmsTemplate, provides a hint to the message producer to enable message timestamps.",
      "setterProperty": true,
      "propertyDataType": "java.lang.Boolean"
    },
    "postProcessor": {
      "propertyName": "postProcessor",
      "helpText": "Post processing operations on the JMS message before being sent over the wire.",
      "setterProperty": true,
      "userSuppliedClass": true,
      "usageDataType":"org.ikasan.component.endpoint.jms.producer.PostProcessor"
    },
    "priority": {
      "propertyName": "priority",
      "helpText": "Optional allows to set message priority on the message. This option will only work if the broker or/and consumer are configured to use the priority when dispatching/consuming messages.",
      "setterProperty": true,
      "propertyDataType": "java.lang.Integer"
    },
    "pubSubDomain": {
      "propertyName": "pubSubDomain",
      "helpText": "Set to true to indicate that destination is a topic, otherwise destination is a queue.",
      "setterProperty": true,
      "propertyDataType": "java.lang.Boolean"
    },
    "pubSubNoLocal": {
      "propertyName": "pubSubNoLocal",
      "helpText": "Default(false) flag indicating whether to inhibit the delivery of messages published by its own connection.",
      "setterProperty": true,
      "propertyDataType": "java.lang.Boolean"
    },
    "receiveTimeout": {
      "propertyName": "receiveTimeout",
      "helpText": "Sets the receive timout (in milliseconds) for querying and download of content. Defaults to the JMS spring timeout.",
      "setterProperty": true,
      "propertyDataType": "java.lang.Long"
    },
    "sessionAcknowledgeMode": {
      "propertyName": "sessionAcknowledgeMode",
      "helpText": "The JMS acknowledgement mode that is used when creating a JMS Session to send a message, valid values are: SESSION_TRANSACTED = 0, AUTO_ACKNOWLEDGE = 1, CLIENT_ACKNOWLEDGE = 2, DUPS_OK_ACKNOWLEDGE = 3",
      "setterProperty": true,
      "propertyDataType": "java.lang.Integer"
    },
    "sessionAcknowledgeModeName": {
      "propertyName": "sessionAcknowledgeModeName",
      "helpText": "See javax.jms.Session, set the JMS acknowledgement mode by the name of the corresponding constant in the JMS Session interface, e.g. 'AUTO_ACKNOWLEDGE', 'CLIENT_ACKNOWLEDGE', 'DUPS_OK_ACKNOWLEDGE', 'SESSION_TRANSACTED'",
      "setterProperty": true
    },
    "sessionTransacted": {
      "propertyName": "sessionTransacted",
      "helpText": "Sets whether the session should be part of a transaction.",
      "setterProperty": true,
      "propertyDataType": "java.lang.Boolean"
    },
    "timeToLive": {
      "propertyName": "timeToLive",
      "helpText": "Optional the time-to-live of the message when sending, this is only used when 'isExplicitQosEnabled' equals 'true'.",
      "setterProperty": true,
      "propertyDataType": "java.lang.Long"
    },
    "transactionManager": {
      "propertyName": "transactionManager",
      "helpText": "Provide the classname that overrides and implements the default JtaTransactionManager interface. Typically this is the Spring transaction manager, overriding may be needed to interface into third party containers.",
      "setterProperty": true,
      "usageDataType": "org.springframework.transaction.jta.JtaTransactionManager",
      "userSuppliedClass": true
    }
  }
}