{
  "name": "Local File Consumer",
  "additionalKey":"LocalFileConsumer",
  "builderFactory" : "org.ikasan.builder.BuilderFactory",
  "endpointKey": "File Endpoint",
  "endpointTextKey": "filenames",
  "flowBuilderMethod": "consumer",
  "helpText": "<html><body><h3>Local File Consumer</h3><p>Looks for a file on this host, the frequency is configured in the cron expression. The consumer records the filename, modified time stamp and file size in the local datastore so that the same file is not delivered more than once.</p></body></html>",
  "implementingClass": "org.ikasan.component.endpoint.quartz.consumer.ScheduledConsumer",
  "usesBuilderInFactory" : true,
  "webHelpURL": "https://github.com/ikasanEIP/ikasan/blob/3.1.x/ikasaneip/component/Readme.md",
  "properties": {
    "componentName": {
      "propertyName": "componentName",
      "helpText": "The name of the component as displayed on diagrams, space are encouraged, succinct is best. The name should be unique for the flow. The name will be used internally to reflect the bean created.",
      "mandatory": true
    },
    "cronExpression": {
      "propertyName": "cronExpression",
      "helpText": "Cron based expression dictating the invocation schedule for this component. Example, '*/5 * * * * ?' will fire every 5 seconds.",
      "setterProperty": true,
      "mandatory": true,
      "propertyConfigFileLabel":"__flow.file.consumer.cron-expression"
    },
    "configuration": {
      "propertyName": "configuration",
      "helpText": "Provide the classname that overrides and implements the default FileConsumerConfiguration interface. The class encapsulates all the properties here into a single bean, using it will reduce your ability to configure the component within this tool",
      "setterProperty": true,
      "userSuppliedClass": true,
      "usageDataType":"org.ikasan.component.endpoint.filesystem.messageprovider.FileConsumerConfiguration",
      "validation":"^[A-Z_$][a-zA-Z\\d_$£]*$",
      "validationMessage": "Provide a java classname for the Configuration bean."
    },
    "configurable": {
      "propertyName": "configurable",
      "helpText": "This property reflects that a component has the necessary configuration setup so that it can be edited in the blue console. Its is more of a status and as such is not explicitly used.",
      "ignoreProperty": true
    },
    "configurationId": {
      "propertyName": "configurationId",
      "helpText": "By default, the configuration ID = modulename + flowname + componentName + componentType. There are times when you may wish to override this i.e. if you want multiple flows to share the same configration or you have changed a flow name but don't want to update properties that may have already been stored in the override properties database.",
      "setterProperty": true,
      "setterMethod" : "setConfiguredResourceId",
      "usageDataType":"java.lang.String"
    },
    "invokerConfigurationId": {
      "propertyName": "invokerConfigurationId",
      "helpText": "By default, the configuration ID = modulename + flowname + componentName + componentType + some RandomData. There are times when you may wish to override this i.e. if you want multiple flows to share the same configration or you have changed a flow name but don't want to update properties that may have already been stored in the override properties database.",
      "usageDataType":"java.lang.String"
    },
    "criticalOnStartup": {
      "propertyName": "criticalOnStartup",
      "helpText": "Identify this component as being critical for starting the flow i.e. if the component fails to start, the whole flow will not start.",
      "setterProperty": true,
      "propertyDataType": "java.lang.Boolean"
    },

    "directoryDepth": {
      "propertyName": "directoryDepth",
      "helpText": "How deep down the directory tree to go to find matching filenames.",
      "setterProperty": true,
      "propertyDataType": "java.lang.Integer"
    },
    "eager": {
      "propertyName": "eager",
      "helpText": "When true the scheduled consumer is immediately called back on completion of flow execution i.e. attempts to consume all messages available. If false the scheduled consumers cron expression determines the callback.",
      "setterProperty": true,
      "propertyDataType": "java.lang.Boolean"
    },
    "encoding": {
      "propertyName": "encoding",
      "defaultValue":"UTF-8",
      "helpText": "Encoding of the files ie. UTF-8.",
      "setterProperty": true,
      "propertyDataType": "java.lang.Boolean"
    },
    "eventFactory": {
      "propertyName": "eventFactory",
      "helpText": "Provide the classname that overrides and implements the default EventFactory interface. The Event factory used to instantiate ikasan flow events based on incoming payload from the tech endpoint.",
      "setterProperty": true,
      "userSuppliedClass": true,
      "usageDataType":"org.ikasan.spec.event.EventFactory",
      "validation":"^[A-Z_$][a-zA-Z\\d_$£]*$",
      "validationMessage": "Provide a java classname for the Configuration bean."
    },
    "filenames": {
      "propertyName": "filenames",
      "defaultValue":"{'myFile','anotherFile'}",
      "helpText": "The list of filenames to consume, the files are assumed to be in the same directory as the running ikasan application or one of its subdirectories.",
      "mandatory": true,
      "propertyConfigFileLabel":"__flow.file.consumer.filenames",
      "setterProperty": true,
      "usageDataType":"java.util.List<String>"
    },
    "ignoreFileRenameWhilstScanning": {
      "propertyName": "ignoreFileRenameWhilstScanning",
      "helpText": "Ignore cases where the file has been renamed between scanning and retrieval.",
      "setterProperty": true,
      "propertyDataType": "java.lang.Boolean"
    },
    "ignoreMisfire": {
      "propertyName": "ignoreMisfire",
      "helpText": "Default(True). Whether to ignore call back failures.",
      "setterProperty": true,
      "propertyDataType": "java.lang.Boolean"
    },
    "includeHeader": {
      "propertyName": "includeHeader",
      "helpText": "Assume first line of the file is a header and include it as a header within the message payload.",
      "setterProperty": true,
      "propertyDataType": "java.lang.Boolean"
    },
    "includeTrailer": {
      "propertyName": "includeTrailer",
      "helpText": "Assume last line of the file is a trailer and include it as a trailer within the message payload.",
      "setterProperty": true,
      "propertyDataType": "java.lang.Boolean"
    },
    "logMatchedFilenames": {
      "propertyName": "logMatchedFilenames",
      "helpText": "Write any matching filenames found to the log files as additional information.",
      "setterProperty": true,
      "propertyDataType": "java.lang.Boolean"
    },
    "managedEventIdentifierService": {
      "propertyName": "managedEventIdentifierService",
      "helpText": "Provide the classname that overrides and implements the default ManagedEventIdentifierService interface. This is used to provide control over the flow event created by this consumer",
      "setterProperty": true,
      "userSuppliedClass": true,
      "usageDataType":"org.ikasan.spec.event.ManagedEventIdentifierService",
      "validation":"^[A-Z_$][a-zA-Z\\d_$£]*$",
      "validationMessage": "Provide a java classname for the consumer event provider bean."
    },
    "maxEagerCallbacks": {
      "propertyName": "maxEagerCallbacks",
      "helpText": "The maximum number of consecutive eager scheduled callbacks (when eager is set to true) before reverting to business schedule. Default is unlimited until no more data available.",
      "setterProperty": true,
      "propertyDataType": "java.lang.Integer"
    },
    "messageProvider": {
      "propertyName": "messageProvider",
      "helpText": "Provide the classname that overrides and implements the default MessageProvider interface. The message provider is responsible for providing the message payload.",
      "setterProperty": true,
      "userSuppliedClass": true,
      "usageDataType":"org.ikasan.component.endpoint.quartz.consumer.MessageProvider",
      "validation":"^[A-Z_$][a-zA-Z\\d_$£]*$",
      "validationMessage": "Provide a java classname for the Message Provider bean."
    },
    "messageProviderPostProcessor": {
      "propertyName": "messageProviderPostProcessor",
      "helpText": "Provide the classname that overrides and implements the default MessageProviderPostProcessor interface. This class provide additional functionality to be applied to the payload as a post processor before returning for next component invocation.",
      "setterProperty": true,
      "userSuppliedClass": true,
      "usageDataType":"org.ikasan.component.endpoint.filesystem.messageprovider.MessageProviderPostProcessor",
      "validation":"^[A-Z_$][a-zA-Z\\d_$£]*$",
      "validationMessage": "Provide a java classname for the Message Provider Post Processor bean."
    },
    "sortAscending": {
      "propertyName": "sortAscending",
      "helpText": "Sort the list in ascending order (true) or descending order (false) when a sort method is used.",
      "setterProperty": true,
      "propertyDataType": "java.lang.Boolean"
    },
    "sortByModifiedDateTime": {
      "propertyName": "sortByModifiedDateTime",
      "helpText": "Sort the received file list by last modified date time.",
      "setterProperty": true,
      "propertyDataType": "java.lang.Boolean"
    },
    "timezone": {
      "propertyName": "timezone",
      "helpText": "Support for overriding the default timezone.",
      "setterProperty": true
    }
  }
}
