<#assign StudioUtils=statics['org.ikasan.studio.StudioUtils']>
package ${studioPackageTag};

/**
* The component factory defines the details of the components and their configuration.
*
* This file is auto-generated by Ikasan Studio, do no edit.
*/
@org.springframework.context.annotation.Configuration
public class ComponentFactory
{
@org.springframework.beans.factory.annotation.Value("${r"${module.name}"}")
private String moduleName;

@javax.annotation.Resource
org.ikasan.builder.BuilderFactory builderFactory;

<#compress>
<#list flow.flowComponentList![] as ikasanFlowComponent>
    <#if ikasanFlowComponent.type.bespokeClass>
        @javax.annotation.Resource
        ${module.properties.ApplicationPackageName.value}.${flow.getJavaPackageName()}.${ikasanFlowComponent.properties.BespokeClassName.value} ${ikasanFlowComponent.getJavaVariableName()};
    <#else>
        <#list ikasanFlowComponent.getStandardProperties()![] as propName, propValue>
            <#if propValue.meta.propertyConfigFileLabel != "" && propValue.value??>
                <#if propValue.meta.usageDataType?starts_with("java.util.List")>
                    <#assign f_startTag = r'#{${' >
                    <#assign f_endTag = r'}}' >
                <#else>
                    <#assign f_startTag = r'${'>
                    <#assign f_endTag = r'}'>
                </#if>
                <#if ikasanFlowComponent.getJavaPackageName() != "">
                    <#assign f_propertyName = '${flow.getJavaPackageName()}.${ikasanFlowComponent.getJavaPackageName()}.${propValue.meta.propertyConfigFileLabel}' >
                <#else>
                    <#assign f_propertyName = '${flow.getJavaPackageName()}.${propValue.meta.propertyConfigFileLabel}' >
                </#if>
                @org.springframework.beans.factory.annotation.Value("${f_startTag}${f_propertyName}${f_endTag}")
                <#if propValue.meta.usageDataType?starts_with("java.util.List")>
                    <#assign f_dataType = propValue.meta.usageDataType >
                <#else>
                    <#assign f_dataType = propValue.meta.propertyDataType.getCanonicalName()>
                </#if>
                ${f_dataType} ${propValue.meta.getPropertyConfigFileLabelAsVariable()};
            </#if>
        </#list>
    </#if>
</#list>
</#compress>

<#compress>
    <#list flow.flowComponentList![] as ikasanFlowComponent>
        <#if ! ikasanFlowComponent.type.bespokeClass>
            <#list ikasanFlowComponent.getStandardProperties() as propName, propValue>
                <#if propValue.meta.userImplementedClass>
                    @javax.annotation.Resource
                    ${propValue.meta.usageDataType} ${StudioUtils.toJavaIdentifier(propValue.valueString)};
                </#if>
            </#list>
        </#if>
    </#list>
</#compress>


<#compress>
<#list flow.flowComponentList![] as ikasanFlowComponent>
    public ${ikasanFlowComponent.type.elementCategory.baseClass} get${ikasanFlowComponent.getJavaClassName()}() {
    <#if ikasanFlowComponent.type.bespokeClass>
        return ${ikasanFlowComponent.getJavaVariableName()};
    <#else>
        return builderFactory.getComponentBuilder().${ikasanFlowComponent.type.associatedMethodName}()
        <#list ikasanFlowComponent.getStandardProperties() as propName, propValue>
            <#if propValue.value??>
                <#if propValue.meta.propertyConfigFileLabel != "">
                    .set${propName}(${propValue.meta.getPropertyConfigFileLabelAsVariable()})
                <#else>
                    <#if propValue.meta.userImplementedClass>
                        .set${propName}(${StudioUtils.toJavaIdentifier(propValue.valueString)})
                    <#else>
                        <#if propValue.meta.usageDataType == "java.lang.String">
                            .set${propName}("${propValue.valueString}")
                        <#else>
                            .set${propName}(${propValue.valueString})
                        </#if>
                    </#if>
                </#if>
            </#if>
        </#list>
        .build();
    </#if>
    }
</#list>
</#compress>
}