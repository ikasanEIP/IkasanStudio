package org.ikasan;

/**
* The component factory defines the details of the components and their configuration.
*
* This file is auto-generated by Ikasan Studio, do no edit.
*/
@org.springframework.context.annotation.Configuration
public class ComponentFactoryMyFlow1
{
@org.springframework.beans.factory.annotation.Value("${module.name}")
private String moduleName;

@javax.annotation.Resource
org.ikasan.builder.BuilderFactory builderFactory;

@org.springframework.beans.factory.annotation.Value("${myflow1.testjmsconsumer.amq.__module.connectionFactory.name}")
java.lang.String amq__moduleConnectionFactoryName;
@org.springframework.beans.factory.annotation.Value("${myflow1.testjmsconsumer.jms.destination.__module.__flow.__componentName}")
java.lang.String jmsDestination__module__flow__componentName;
@org.springframework.beans.factory.annotation.Value("${myflow1.testjmsconsumer.amq.__module.connectionFactory.password}")
java.lang.String amq__moduleConnectionFactoryPassword;
@org.springframework.beans.factory.annotation.Value("${myflow1.testjmsconsumer.amq.__module.java.naming.factory.initial}")
java.lang.String amq__moduleJavaNamingFactoryInitial;
@org.springframework.beans.factory.annotation.Value("${myflow1.testjmsconsumer.amq.__module.provider.url}")
java.lang.String amq__moduleProviderUrl;
@org.springframework.beans.factory.annotation.Value("${myflow1.testjmsconsumer.amq.__module.connection.provider.url}")
java.lang.String amq__moduleConnectionProviderUrl;
@org.springframework.beans.factory.annotation.Value("${myflow1.testjmsconsumer.amq.__module.connectionFactory.user}")
java.lang.String amq__moduleConnectionFactoryUser;
@javax.annotation.Resource
org.ikasan.component.endpoint.filesystem.messageprovider.FileConsumerConfiguration myConfigurationClass;
@javax.annotation.Resource
org.ikasan.spec.event.ManagedRelatedEventIdentifierService myManagedIdentifierService;
@javax.annotation.Resource
javax.jms.ConnectionFactory myConnectionFactory;
@javax.annotation.Resource
org.ikasan.component.endpoint.quartz.consumer.MessageProvider myMessageProvider;
@javax.annotation.Resource
org.ikasan.spec.event.EventFactory myEventFactoryClassName;
@javax.annotation.Resource
org.springframework.transaction.jta.JtaTransactionManager myTransactionManagerClass;

public org.ikasan.spec.component.endpoint.Consumer getTestJmsConsumer() {
return builderFactory.getComponentBuilder().jmsConsumer()
.setConnectionFactoryName(amq__moduleConnectionFactoryName)
.setConfiguration(myConfigurationClass)
.setDestinationJndiProperties("myDestinationJndiProperties")
.setMaxConcurrentConsumers(11)
.setManagedIdentifierService(myManagedIdentifierService)
.setBatchMode(true)
.setDestinationJndiName(jmsDestination__module__flow__componentName)
.setReceiveTimeout(1000)
.setSessionAcknowledgeMode(1)
.setConnectionFactory(myConnectionFactory)
.setConnectionFactoryPassword(amq__moduleConnectionFactoryPassword)
.setConnectionFactoryJndiPropertyFactoryInitial(amq__moduleJavaNamingFactoryInitial)
.setDestinationJndiPropertyProviderUrl(amq__moduleProviderUrl)
.setConnectionPassword("myConnectionPassword")
.setAutoContentConversion(true)
.setConnectionFactoryJndiPropertySecurityPrincipal("myConnectionFactoryJndiPropertySecurityPrincipal")
.setBatchSize(10)
.setMessageProvider(myMessageProvider)
.setDurableSubscriptionName("myDurableSubscriptionName")
.setAutoSplitBatch(true)
.setDestinationJndiPropertyUrlPkgPrefixes("org.myapp")
.setEventFactory(myEventFactoryClassName)
.setConnectionFactoryJndiPropertySecurityCredentials("myConnectionFactoryJndiPropertySecurityCredentials")
.setConnectionFactoryJndiPropertyProviderUrl(amq__moduleConnectionProviderUrl)
.setConnectionFactoryJndiPropertyUrlPkgPrefixes("myConnectionFactoryJndiPropertyUrlPkgPrefixes")
.setSessionTransacted(true)
.setConnectionFactoryJNDIProperties({key1:'value1',key2:'value2'})
.setConnectionUsername("myConnectionUsername")
.setConnectionFactoryUsername(amq__moduleConnectionFactoryUser)
.setConfiguredResourceId("myUniqueConfiguredResourceIdName")
.setTransactionManager(myTransactionManagerClass)
.setConcurrentConsumers(10)
.setDurable(true)
.setCacheLevel(1)
.setPubSubDomain(myPubSubDomain)
.build();
}}