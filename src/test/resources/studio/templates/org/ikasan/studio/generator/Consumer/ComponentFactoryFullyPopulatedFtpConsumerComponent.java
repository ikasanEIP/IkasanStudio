package org.ikasan;

/**
* The component factory defines the details of the components and their configuration.
*
* This file is auto-generated by Ikasan Studio, do no edit.
*/
@org.springframework.context.annotation.Configuration
public class ComponentFactoryMyFlow1
{
@org.springframework.beans.factory.annotation.Value("${module.name}")
private String moduleName;

@javax.annotation.Resource
org.ikasan.builder.BuilderFactory builderFactory;

@org.springframework.beans.factory.annotation.Value("${myflow1.ftp.consumer.remote-host}")
java.lang.String myFlow1FtpConsumerRemotehost;
@org.springframework.beans.factory.annotation.Value("${myflow1.ftp.consumer.password}")
java.lang.String myFlow1FtpConsumerPassword;
@org.springframework.beans.factory.annotation.Value("${myflow1.ftp.consumer.ftps-port}")
java.lang.Integer myFlow1FtpConsumerFtpsport;
@org.springframework.beans.factory.annotation.Value("${myflow1.ftp.consumer.ftps-protocol}")
java.lang.Integer myFlow1FtpConsumerFtpsprotocol;
@org.springframework.beans.factory.annotation.Value("${myflow1.ftp.consumer.source-directory}")
java.lang.String myFlow1FtpConsumerSourcedirectory;
@org.springframework.beans.factory.annotation.Value("${myflow1.ftp.consumer.remote-port}")
java.lang.String myFlow1FtpConsumerRemoteport;
@org.springframework.beans.factory.annotation.Value("${myflow1.ftp.consumer.max-retry-attempts}")
java.lang.Integer myFlow1FtpConsumerMaxretryattempts;
@org.springframework.beans.factory.annotation.Value("${myflow1.ftp.consumer.cron-expression}")
java.lang.String myFlow1FtpConsumerCronexpression;
@javax.annotation.Resource
org.ikasan.component.endpoint.filesystem.messageprovider.FileConsumerConfiguration myConfigurationClass;
@javax.annotation.Resource
org.ikasan.spec.management.ManagedResourceRecoveryManager myManagedResourceRecoveryManagerClass;
@javax.annotation.Resource
org.ikasan.spec.event.ManagedEventIdentifierService myManagedEventIdentifierServiceClass;

public org.ikasan.spec.component.endpoint.Consumer getMyFTPConsumer() {
return builderFactory.getComponentBuilder().myFTPConsumer()
.setClientID(myClientId)
.setFilterOnFilename(true)
.setRemoteHost(myFlow1FtpConsumerRemotehost)
.setConfiguration(myConfigurationClass)
.setConfiguredResourceId("myUniqueConfiguredResourceIdName")
.setIgnoreMisfire(true)
.setFilterOnLastModifiedDate(true)
.setMaxRows(11)
.setPassword(myFlow1FtpConsumerPassword)
.setFilterDuplicates(true)
.setChunking(true)
.setFtpsPort(myFlow1FtpConsumerFtpsport)
.setChecksum(true)
.setManagedResourceRecoveryManager(myManagedResourceRecoveryManagerClass)
.setManagedEventIdentifierService(myManagedEventIdentifierServiceClass)
.setConnectionTimeout(600001)
.setFtpsKeyStoreFilePath(/test/ftps/keystore)
.setFtpsKeyStoreFilePassword(myFtpsKeyStoreFilePassword)
.setFtps(true)
.setCleanupJournalOnComplete(true)
.setFtpsProtocol(myFlow1FtpConsumerFtpsprotocol)
.setChunkSize(1048577)
.setSourceDirectory(myFlow1FtpConsumerSourcedirectory)
.setRemotePort(myFlow1FtpConsumerRemoteport)
.setActive(true)
.setDestructive(true)
.setMaxRetryAttempts(myFlow1FtpConsumerMaxretryattempts)
.setCronExpression(myFlow1FtpConsumerCronexpression)
.setDataTimeout(300001)
.setMaxRows(12)
.setAgeOfFiles(10)
.setMaxEagerCallbacks(1)
.setFilterOnLastModifiedDate(true)
.setChronological(true)
.setFtpsIsImplicit(true)
.build();
}}