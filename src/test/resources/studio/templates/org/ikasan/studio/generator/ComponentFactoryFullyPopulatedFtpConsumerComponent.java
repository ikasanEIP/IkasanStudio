package org.ikasan;

/**
* The component factory defines the details of the components and their configuration.
*
* This file is auto-generated by Ikasan Studio, do no edit.
*/
@org.springframework.context.annotation.Configuration
public class ComponentFactoryMyFlow1
{
@org.springframework.beans.factory.annotation.Value("${module.name}")
private String moduleName;

@javax.annotation.Resource
org.ikasan.builder.BuilderFactory builderFactory;

@org.springframework.beans.factory.annotation.Value("${myflow1.testftpconsumer.ftp.consumer.cron-expression}")
java.lang.String ftpConsumerCronexpression;
@org.springframework.beans.factory.annotation.Value("${myflow1.testftpconsumer.ftp.consumer.filename-pattern}")
java.lang.String ftpConsumerFilenamepattern;
@org.springframework.beans.factory.annotation.Value("${myflow1.testftpconsumer.ftp.consumer.move-on-success-new-path}")
java.lang.String ftpConsumerMoveonsuccessnewpath;
@org.springframework.beans.factory.annotation.Value("${myflow1.testftpconsumer.ftp.consumer.system-key}")
java.lang.String ftpConsumerSystemkey;
@org.springframework.beans.factory.annotation.Value("${myflow1.testftpconsumer.ftp.consumer.source-directory}")
java.lang.String ftpConsumerSourcedirectory;
@org.springframework.beans.factory.annotation.Value("${myflow1.testftpconsumer.ftp.consumer.max-retry-attempts}")
java.lang.Integer ftpConsumerMaxretryattempts;
@org.springframework.beans.factory.annotation.Value("${myflow1.testftpconsumer.ftp.consumer.ftps-protocol}")
java.lang.String ftpConsumerFtpsprotocol;
@org.springframework.beans.factory.annotation.Value("${myflow1.testftpconsumer.ftp.consumer.password}")
java.lang.String ftpConsumerPassword;
@org.springframework.beans.factory.annotation.Value("${myflow1.testftpconsumer.ftp.consumer.remote-port}")
java.lang.Integer ftpConsumerRemoteport;
@org.springframework.beans.factory.annotation.Value("${myflow1.testftpconsumer.ftp.consumer.ftps-port}")
java.lang.Integer ftpConsumerFtpsport;
@org.springframework.beans.factory.annotation.Value("${myflow1.testftpconsumer.ftp.consumer.remote-host}")
java.lang.String ftpConsumerRemotehost;
@org.springframework.beans.factory.annotation.Value("${myflow1.testftpconsumer.ftp.consumer.username}")
java.lang.String ftpConsumerUsername;
@org.springframework.beans.factory.annotation.Value("${myflow1.testftpconsumer.ftp.consumer.password-filepath}")
java.lang.String ftpConsumerPasswordfilepath;
@javax.annotation.Resource
org.ikasan.component.endpoint.filesystem.messageprovider.FileConsumerConfiguration myConfigurationClass;
@javax.annotation.Resource
org.ikasan.spec.event.ManagedEventIdentifierService myManagedEventIdentifierServiceClass;
@javax.annotation.Resource
org.ikasan.component.endpoint.quartz.consumer.MessageProvider myMessageProviderClass;
@javax.annotation.Resource
org.ikasan.framework.factory.DirectoryURLFactory myDirectoryURLFactoryClass;
@javax.annotation.Resource
org.springframework.transaction.jta.JtaTransactionManager myTransactionManagerClass;
@javax.annotation.Resource
org.ikasan.spec.management.ManagedResourceRecoveryManager myManagedResourceRecoveryManagerClass;

public org.ikasan.spec.component.endpoint.Consumer getTestFtpConsumer() {
return builderFactory.getComponentBuilder().ftpConsumer()
.setConfiguration(myConfigurationClass)
.setIgnoreMisfire(true)
.setFtpsKeyStoreFilePassword("myFtpsKeyStoreFilePassword")
.setMoveOnSuccess(true)
.setChecksum(true)
.setCronExpression(ftpConsumerCronexpression)
.setRenameOnSuccessExtension("newExtension")
.setFilenamePattern(ftpConsumerFilenamepattern)
.setMaxEagerCallbacks(1)
.setManagedEventIdentifierService(myManagedEventIdentifierServiceClass)
.setFilterOnLastModifiedDate(true)
.setMessageProvider(myMessageProviderClass)
.setFtpsKeyStoreFilePath("/test/ftps/keystore")
.setFtpsIsImplicit(true)
.setMoveOnSuccessNewPath(ftpConsumerMoveonsuccessnewpath)
.setAgeOfFiles(10)
.setChunking(true)
.setIsRecursive(true)
.setSourceDirectoryURLFactory(myDirectoryURLFactoryClass)
.setSystemKey(ftpConsumerSystemkey)
.setChunkSize(1048577)
.setActive(true)
.setMinAge(12)
.setDestructive(true)
.setConfiguredResourceId("myUniqueConfiguredResourceIdName")
.setTransactionManager(myTransactionManagerClass)
.setClientID("myClientId")
.setSourceDirectory(ftpConsumerSourcedirectory)
.setMaxRows(11)
.setConnectionTimeout(600001)
.setMaxRetryAttempts(ftpConsumerMaxretryattempts)
.setManagedResourceRecoveryManager(myManagedResourceRecoveryManagerClass)
.setFtpsProtocol(ftpConsumerFtpsprotocol)
.setScheduledJobName("myScheduledJobName")
.setSocketTimeout(22)
.setCleanupJournalOnComplete(true)
.setPassword(ftpConsumerPassword)
.setFilterOnFilename(true)
.setRemotePort(ftpConsumerRemoteport)
.setRenameOnSuccess(true)
.setFtpsPort(ftpConsumerFtpsport)
.setFTPS(true)
.setChronological(true)
.setRemoteHost(ftpConsumerRemotehost)
.setUsername(ftpConsumerUsername)
.setDataTimeout(300001)
.setPasswordFilePath(ftpConsumerPasswordfilepath)
.setScheduledJobGroupName("myScheduledJobGroupName")
.setFilterDuplicates(true)
.build();
}}