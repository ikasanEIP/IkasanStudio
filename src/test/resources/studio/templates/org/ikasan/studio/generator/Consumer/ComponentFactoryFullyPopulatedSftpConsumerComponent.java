package org.ikasan;

/**
* The component factory defines the details of the components and their configuration.
*
* This file is auto-generated by Ikasan Studio, do no edit.
*/
@org.springframework.context.annotation.Configuration
public class ComponentFactoryMyFlow1
{
@org.springframework.beans.factory.annotation.Value("${module.name}")
private String moduleName;

@javax.annotation.Resource
org.ikasan.builder.BuilderFactory builderFactory;

@org.springframework.beans.factory.annotation.Value("${myflow1.sftp.consumer.cron-expression}")
java.lang.String myFlow1SftpConsumerCronExpression;
@org.springframework.beans.factory.annotation.Value("${myflow1.sftp.consumer.known-hosts-filename}")
java.lang.String myFlow1SftpConsumerKnownHostsFilename;
@org.springframework.beans.factory.annotation.Value("${myflow1.sftp.consumer.max-retry-attempts}")
java.lang.Integer myFlow1SftpConsumerMaxRetryAttempts;
@org.springframework.beans.factory.annotation.Value("${myflow1.sftp.consumer.move-on-success-new-path}")
java.lang.String myFlow1SftpConsumerMoveOnSuccessNewPath;
@org.springframework.beans.factory.annotation.Value("${myflow1.sftp.consumer.password}")
java.lang.String myFlow1SftpConsumerPassword;
@org.springframework.beans.factory.annotation.Value("${myflow1.sftp.consumer.preferred-key-exchange-algorithm}")
java.lang.String myFlow1SftpConsumerPreferredKeyExchangeAlgorithm;
@org.springframework.beans.factory.annotation.Value("${myflow1.sftp.consumer.private-key-filename}")
java.lang.String myFlow1SftpConsumerPrivateKeyFilename;
@org.springframework.beans.factory.annotation.Value("${myflow1.sftp.consumer.remote-host}")
java.lang.String myFlow1SftpConsumerRemoteHost;
@org.springframework.beans.factory.annotation.Value("${myflow1.sftp.consumer.remote-port}")
java.lang.String myFlow1SftpConsumerRemotePort;
@org.springframework.beans.factory.annotation.Value("${myflow1.sftp.consumer.source-directory}")
java.lang.String myFlow1SftpConsumerSourceDirectory;
@org.springframework.beans.factory.annotation.Value("${myflow1.sftp.consumer.system-key}")
java.lang.String myFlow1SftpConsumerSystemKey;
@javax.annotation.Resource
org.ikasan.component.endpoint.filesystem.messageprovider.FileConsumerConfiguration myConfigurationClass;
@javax.annotation.Resource
org.ikasan.spec.event.EventFactory orgIkasanMyflowMyEventFactory;
@javax.annotation.Resource
org.ikasan.spec.event.ManagedEventIdentifierService myManagedEventIdentifierServiceClass;
@javax.annotation.Resource
org.ikasan.spec.management.ManagedResourceRecoveryManager myManagedResourceRecoveryManagerClass;
@javax.annotation.Resource
org.ikasan.component.endpoint.quartz.consumer.MessageProvider myMessageProviderClass;
@javax.annotation.Resource
org.ikasan.framework.factory.DirectoryURLFactory myDirectoryURLFactoryClass;
@javax.annotation.Resource
org.springframework.transaction.jta.JtaTransactionManager myTransactionManagerClass;

public org.ikasan.spec.component.endpoint.Consumer getMySFTPConsumer() {
return builderFactory.getComponentBuilder().sftpConsumer()
.setAgeOfFiles(10)
.setChecksum(true)
.setChronological(true)
.setChunkSize(1048577)
.setChunking(true)
.setCleanupJournalOnComplete(true)
.setClientID(myClientId)
.setConfiguration(myConfigurationClass)
.setConfiguredResourceId("myUniqueConfiguredResourceIdName")
.setConnectionTimeout(600001)
.setCriticalOnStartup(true)
.setCronExpression(myFlow1SftpConsumerCronExpression)
.setDataTimeout(300001)
.setDestructive(true)
.setEager(true)
.setEventFactory(orgIkasanMyflowMyEventFactory)
.setIgnoreMisfire(true)
.setIsRecursive(true)
.setKnownHostFilename(myFlow1SftpConsumerKnownHostsFilename)
.setManagedEventIdentifierService(myManagedEventIdentifierServiceClass)
.setManagedResourceRecoveryManager(myManagedResourceRecoveryManagerClass)
.setMaxEagerCallbacks(1)
.setMaxRetryAttempts(myFlow1SftpConsumerMaxRetryAttempts)
.setMaxRows(11)
.setMessageProvider(myMessageProviderClass)
.setMaxRows(12)
.setMoveOnSuccessNewPath(myFlow1SftpConsumerMoveOnSuccessNewPath)
.setPassword(myFlow1SftpConsumerPassword)
.setPreferredKeyExchangeAlgorithm(myFlow1SftpConsumerPreferredKeyExchangeAlgorithm)
.setPrivateKeyFilename(myFlow1SftpConsumerPrivateKeyFilename)
.setRemoteHost(myFlow1SftpConsumerRemoteHost)
.setRemotePort(myFlow1SftpConsumerRemotePort)
.setRenameOnSuccess(true)
.setRenameOnSuccessExtension(newExtension)
.setScheduledJobGroupName(myScheduledJobGroupName)
.setScheduledJobName(myScheduledJobName)
.setSourceDirectory(myFlow1SftpConsumerSourceDirectory)
.setSourceDirectoryURLFactory(myDirectoryURLFactoryClass)
.setSystemKey(myFlow1SftpConsumerSystemKey)
.setTransactionManager(myTransactionManagerClass)
.build();
}}