package org.ikasan;

/**
* The component factory defines the details of the components and their configuration.
*
* This file is auto-generated by Ikasan Studio, do no edit.
*/
@org.springframework.context.annotation.Configuration
public class ComponentFactoryMyFlow1
{
@org.springframework.beans.factory.annotation.Value("${module.name}")
private String moduleName;

@javax.annotation.Resource
org.ikasan.builder.BuilderFactory builderFactory;

@org.springframework.beans.factory.annotation.Value("${myflow1.ftp.producer.clientID}")
java.lang.String myFlow1FtpProducerClientID;
@org.springframework.beans.factory.annotation.Value("${myflow1.ftp.consumer.ftps-port}")
java.lang.Integer myFlow1FtpConsumerFtpsPort;
@org.springframework.beans.factory.annotation.Value("${myflow1.ftp.consumer.ftps-protocol}")
java.lang.Integer myFlow1FtpConsumerFtpsProtocol;
@org.springframework.beans.factory.annotation.Value("${myflow1.ftp.consumer.max-retry-attempts}")
java.lang.Integer myFlow1FtpConsumerMaxRetryAttempts;
@org.springframework.beans.factory.annotation.Value("${myflow1.ftp.producer.outputDirectory}")
java.lang.String myFlow1FtpProducerOutputDirectory;
@org.springframework.beans.factory.annotation.Value("${myflow1.ftp.consumer.password}")
java.lang.String myFlow1FtpConsumerPassword;
@org.springframework.beans.factory.annotation.Value("${myflow1.ftp.consumer.remote-host}")
java.lang.String myFlow1FtpConsumerRemoteHost;
@org.springframework.beans.factory.annotation.Value("${myflow1.ftp.consumer.remote-port}")
java.lang.String myFlow1FtpConsumerRemotePort;
@org.springframework.beans.factory.annotation.Value("${myflow1.ftp.consumer.system-key}")
java.lang.String myFlow1FtpConsumerSystemKey;
@org.springframework.beans.factory.annotation.Value("${myflow1.ftp.consumer.username}")
java.lang.String myFlow1FtpConsumerUsername;
@javax.annotation.Resource
org.ikasan.component.endpoint.filesystem.messageprovider.FileConsumerConfiguration myConfigurationClass;
@javax.annotation.Resource
org.ikasan.spec.management.ManagedResourceRecoveryManager myManagedResourceRecoveryManagerClass;
@javax.annotation.Resource
org.springframework.transaction.jta.JtaTransactionManager myTransactionManagerClass;

public org.ikasan.spec.component.endpoint.Producer getMyFTPProducer() {
return builderFactory.getComponentBuilder().fTPProducer()
.setActive(true)
.setChecksumDelivered(true)
.setCleanupJournalOnComplete(true)
.setClientID(myFlow1FtpProducerClientID)
.setConfiguration(myConfigurationClass)
.setConfiguredResourceId("myUniqueConfiguredResourceIdName")
.setCreateParentDirectory(true)
.setCriticalOnStartup(true)
.setDataTimeout(300001)
.setFtps(true)
.setFtpsIsImplicit(true)
.setFtpsKeyStoreFilePassword("myFtpsKeyStoreFilePassword")
.setFtpsKeyStoreFilePath("/test/ftps/keystore")
.setFtpsPort(myFlow1FtpConsumerFtpsPort)
.setFtpsProtocol(myFlow1FtpConsumerFtpsProtocol)
.setManagedResourceRecoveryManager(myManagedResourceRecoveryManagerClass)
.setMaxRetryAttempts(myFlow1FtpConsumerMaxRetryAttempts)
.setOutputDirectory(myFlow1FtpProducerOutputDirectory)
.setOverwrite(true)
.setPassword(myFlow1FtpConsumerPassword)
.setRemoteHost(myFlow1FtpConsumerRemoteHost)
.setRemotePort(myFlow1FtpConsumerRemotePort)
.setRenameExtension(tmp)
.setSocketTimeout(22)
.setSystemKey(myFlow1FtpConsumerSystemKey)
.setTempFileName("myTempFiilename")
.setTransactionManager(myTransactionManagerClass)
.setUnzip(true)
.setUsername(myFlow1FtpConsumerUsername)
.build();
}}