package org.ikasan;

/**
* The component factory defines the details of the components and their configuration.
*
* This file is auto-generated by Ikasan Studio, do no edit.
*/
@org.springframework.context.annotation.Configuration
public class ComponentFactoryMyFlow1
{
@org.springframework.beans.factory.annotation.Value("${module.name}")
private String moduleName;

@javax.annotation.Resource
org.ikasan.builder.BuilderFactory builderFactory;

@org.springframework.beans.factory.annotation.Value("${myflow1.ftp.consumer.cron-expression}")
java.lang.String myFlow1FtpConsumerCronexpression;
@javax.annotation.Resource
org.ikasan.spec.event.ManagedEventIdentifierService myManagedEventIdentifierServiceClass;
@javax.annotation.Resource
org.ikasan.component.endpoint.quartz.consumer.MessageProvider myMessageProviderClass;
@javax.annotation.Resource
org.ikasan.component.endpoint.filesystem.messageprovider.FileConsumerConfiguration myConfigurationClass;
@javax.annotation.Resource
org.ikasan.spec.event.EventFactory myEventFactory;
@javax.annotation.Resource
org.ikasan.spec.management.ManagedResourceRecoveryManager myManagedResourceRecoveryManagerClass;

public org.ikasan.spec.component.endpoint.Consumer getTestScheduledConsumer() {
return builderFactory.getComponentBuilder().scheduledConsumer()
.setCriticalOnStartup(true)
.setTimezone("UTC")
.setManagedEventIdentifierService(myManagedEventIdentifierServiceClass)
.setEager(true)
.setMessageProvider(myMessageProviderClass)
.setConfiguration(myConfigurationClass)
.setEventFactory(myEventFactory)
.setIgnoreMisfire(true)
.setManagedResourceRecoveryManager(myManagedResourceRecoveryManagerClass)
.setConfiguredResourceId("myUniqueConfiguredResourceIdName")
.setScheduledJobName("myScheduledJobName")
.setScheduledJobGroupName("myScheduledJobGroupName")
.setCronExpression(myFlow1FtpConsumerCronexpression)
.setMaxEagerCallbacks(1)
.build();
}}