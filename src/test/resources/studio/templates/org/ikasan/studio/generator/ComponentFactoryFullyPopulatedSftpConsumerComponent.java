package org.ikasan;

/**
* The component factory defines the details of the components and their configuration.
*
* This file is auto-generated by Ikasan Studio, do no edit.
*/
@org.springframework.context.annotation.Configuration
public class ComponentFactoryMyFlow1
{
@org.springframework.beans.factory.annotation.Value("${module.name}")
private String moduleName;

@javax.annotation.Resource
org.ikasan.builder.BuilderFactory builderFactory;

@org.springframework.beans.factory.annotation.Value("${myflow1.testsftpconsumer.sftp.consumer.max-retry-attempts}")
java.lang.Integer sftpConsumerMaxretryattempts;
@org.springframework.beans.factory.annotation.Value("${myflow1.testsftpconsumer.sftp.consumer.cron-expression}")
java.lang.String sftpConsumerCronexpression;
@org.springframework.beans.factory.annotation.Value("${myflow1.testsftpconsumer.sftp.consumer.filename-pattern}")
java.lang.String sftpConsumerFilenamepattern;
@org.springframework.beans.factory.annotation.Value("${myflow1.testsftpconsumer.sftp.consumer.password}")
java.lang.String sftpConsumerPassword;
@org.springframework.beans.factory.annotation.Value("${myflow1.testsftpconsumer.sftp.consumer.remote-port}")
java.lang.Integer sftpConsumerRemoteport;
@org.springframework.beans.factory.annotation.Value("${myflow1.testsftpconsumer.sftp.consumer.preferred-key-exchange-algorithm}")
java.lang.String sftpConsumerPreferredkeyexchangealgorithm;
@org.springframework.beans.factory.annotation.Value("${myflow1.testsftpconsumer.sftp.consumer.move-on-success-new-path}")
java.lang.String sftpConsumerMoveonsuccessnewpath;
@org.springframework.beans.factory.annotation.Value("${myflow1.testsftpconsumer.sftp.consumer.private-key-filename}")
java.lang.String sftpConsumerPrivatekeyfilename;
@org.springframework.beans.factory.annotation.Value("${myflow1.testsftpconsumer.sftp.consumer.remote-host}")
java.lang.String sftpConsumerRemotehost;
@org.springframework.beans.factory.annotation.Value("${myflow1.testsftpconsumer.sftp.consumer.username}")
java.lang.String sftpConsumerUsername;
@org.springframework.beans.factory.annotation.Value("${myflow1.testsftpconsumer.sftp.consumer.source-directory}")
java.lang.String sftpConsumerSourcedirectory;
@org.springframework.beans.factory.annotation.Value("${myflow1.testsftpconsumer.sftp.consumer.known-hosts-filename}")
java.lang.String sftpConsumerKnownhostsfilename;
@javax.annotation.Resource
org.ikasan.component.endpoint.filesystem.messageprovider.FileConsumerConfiguration myConfigurationClass;
@javax.annotation.Resource
org.ikasan.spec.management.ManagedResourceRecoveryManager myManagedResourceRecoveryManagerClass;
@javax.annotation.Resource
org.ikasan.spec.event.ManagedEventIdentifierService myManagedEventIdentifierServiceClass;
@javax.annotation.Resource
org.ikasan.component.endpoint.quartz.consumer.MessageProvider myMessageProviderClass;
@javax.annotation.Resource
org.ikasan.framework.factory.DirectoryURLFactory myDirectoryURLFactoryClass;
@javax.annotation.Resource
org.springframework.transaction.jta.JtaTransactionManager myTransactionManagerClass;

public org.ikasan.spec.component.endpoint.Consumer getTestSftpConsumer() {
return builderFactory.getComponentBuilder().sftpConsumer()
.setTimezone("GMT")
.setConnectionTimeout(600001)
.setMaxRetryAttempts(sftpConsumerMaxretryattempts)
.setConfiguration(myConfigurationClass)
.setIgnoreMisfire(true)
.setManagedResourceRecoveryManager(myManagedResourceRecoveryManagerClass)
.setMoveOnSuccess(true)
.setChecksum(true)
.setScheduledJobName("myScheduledJobName")
.setCronExpression(sftpConsumerCronexpression)
.setRenameOnSuccessExtension("newExtension")
.setCleanupJournalOnComplete(true)
.setFilenamePattern(sftpConsumerFilenamepattern)
.setPassword(sftpConsumerPassword)
.setMaxEagerCallbacks(1)
.setCriticalOnStartup(true)
.setManagedEventIdentifierService(myManagedEventIdentifierServiceClass)
.setEager(true)
.setFilterOnFilename(true)
.setMessageProvider(myMessageProviderClass)
.setFilterOnLastModifiedDate(true)
.setRemotePort(sftpConsumerRemoteport)
.setPreferredKeyExchangeAlgorithm(sftpConsumerPreferredkeyexchangealgorithm)
.setMoveOnSuccessNewPath(sftpConsumerMoveonsuccessnewpath)
.setRenameOnSuccess(true)
.setAgeOfFiles(10)
.setIsRecursive(true)
.setChunking(true)
.setSourceDirectoryURLFactory(myDirectoryURLFactoryClass)
.setChronological(true)
.setPrivateKeyFilename(sftpConsumerPrivatekeyfilename)
.setChunkSize(1048577)
.setMinAge(12)
.setRemoteHost(sftpConsumerRemotehost)
.setDestructive(true)
.setConfiguredResourceId("myUniqueConfiguredResourceIdName")
.setUsername(sftpConsumerUsername)
.setTransactionManager(myTransactionManagerClass)
.setClientID("myClientId")
.setScheduledJobGroupName("myScheduledJobGroupName")
.setSourceDirectory(sftpConsumerSourcedirectory)
.setMaxRows(11)
.setFilterDuplicates(true)
.setKnownHostsFilename(sftpConsumerKnownhostsfilename)
.build();
}}